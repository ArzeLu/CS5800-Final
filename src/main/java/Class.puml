@startuml

'note static public getters for the settings page so all guis and shitters can get the settings'

'Master class list'

class DesktopizenRunner{
    -AccountManager accountManager
    -MainContentOperator contentOperator
    -UserInputController inputController
    -Settings settings
    #GUIManager guiManager
    ~run()
}

class AccountManager <<Singleton>> extends Auth{
    -Login login
    -Logout logout
    -Account account
    #Cloud[] cloudServes
    ~void forgetUser(super())
    ~void forgetPassword(super())
    ~void enableCloudServices()
}

class Account{
    #String username
    #String password
    ~void setUsername()
    ~void encrypt()
    ~String decrypt()
    ~String getPassword()
    ~String getUsername()
}

class Login{
    #Auth auth
    ~String login(Auth auth)
}

class Logout{
    #Auth auth
    ~String logout(Auth auth)
}

class UserInputController{
    -MiniGameManager gameManager
    #GUIManager guiManager
    ~char mouseClickResponder()
    ~char keyMapResponder()
}

class MainContentOperator{
    -EnvironmentManager envManager
    -CharacterManager charManager
    ~void renderCharacter()
    ~void renderEnvironment()
}

class EnvironmentManager{
    -EnvironmentCustomizations customizations
    -Environment environment
    ~void render()
    ~void loadCustomizations()
    ~void setCustomizations(String option)
}

class Environment{
    #String[] traits
    ~void setTrait(String trait)
}

class CharacterManager{
    -CharacterCustomizer customizer
    -Character character
    ~void createCharacter(Model model)
    ~void render()
    ~void loadCustomizations()
    ~void setCustomizations(String option)
}

class CharacterInterface{
    ~void setSize()
    ~void setModel()
    ~void setGlow()
    ~void setNameTag()
}

class Character implements CharacterInterface{
    #final Model model
    #double size
    #Glow glow
    #String nameTag
    ~void setSize()
    ~void setGlow()
    ~void setNameTag()
}

class CharacterCustomizer implements CharacterInterface{
    ~void changeSize()
    ~void changeGlow()
    ~void changeNameTag()
}

class CharacterPremiumCustomizer extends CharacterCustomizer{
    ~void applyPremiumModelEffects()
}

class CharacterMultiplayerCustomizer extends CharacterCustomizer{
    ~void applyMultiplayerGlowEffects()
}

class CharacterAdvancedCustomizer extends CharacterCustomizer{
    ~void applyAdvancedNameTagEffects()
}

class CharacterAdditionalSizes extends CharacterCustomizer{
    ~void applyAdditionalSizes()
}

class Animation{
    #Media media
    ~void play()
}

class Model{
    #GraphicModel model
}

class EnvironmentCustomizations{
    #int[2] size
    #Theme theme
    ~void setSize()
    ~void setTheme()
}

class Settings <<Singleton>>{
    #GUI settingsGUI
    ~void setSize()

}

class Statistics{
    #Time uptime
    #double experience
    #int level
    #int totalFeed
}

class Inventory{
    #Item[] items
    ~void addItem()
    ~Item getItem(String name)
}

class Item{
    #String name
    #int amount
}

class ItemGenerator{
    ~Item makeItem(String name, int amount)
}

class LLMManager{
    #LLM llm
    ~void feedData(String data)
    ~String generateText()
}

class ConversationListener <<Singleton>>{
    ~void update()
}

class CharacterConversation{
    -LLMManager llm
    ~String receiveResponse()
    ~String generateText()
}

class FriendConversation{
    -ConversationListener listener
    ~void update()
}

class GUIManager <<Singleton>>{
    -GUIBuilder builder
    ~void build()
}

class GUIBuilder{
    -GUIBuilder nextBuilder
    ~void setNext()
    ~void build()
}

class DairyGUI extends GUIBuilder{
    ~(Override) void build()
}

class TodoListGUI extends GUIBuilder{
    ~(Override) void build()
}

class CustomizationsGUI extends GUIBuilder{
    ~(Override) void build()
}

class SettingsGUI extends GUIBuilder{
    ~(Override) void build()
}

class FriendListGUI extends GUIBuilder{
    ~(Override) void build()
}

class MiniGameGUI extends GUIBuilder{
    ~(Override) void build()
}

class MiniGameManager{
    -FeedGame feedGame
    -DesktopFileGame fileGame
    -TypeGame typeGame
    #Setting setting
}

class FeedGame{
    ~void run()
}

class DesktopFileGame{
    ~void run()
}

class TypeGame{
    ~void run()
}

class FileGenerator{
    ~File generateFile(String title, String content)
}

class FileSender{
    ~void sendFile(File file)
}

class File{
    -String title
    -String content
}

class DiaryManager{
    -Diary[] diaries
    ~void addDiary(Time time, String title, String content)
    ~String getDiary(Time time)
}

interface TextTile{
    ~void setStyle()
    ~void setText()
}

class DiaryTiles implements TextTile{
    #String entry
    ~void setStyle()
    ~void setText()
}

class StatTile implements TextTile{
    #String text
    ~void setStyle()
    ~void setText()
}

class FriendTile implements TextTile{
    #String name
    ~void setStyle()
    ~void setText()
}

class SpeechTile implements TextTile{
    #String text
    ~void setStyle()
    ~void setText()
}

interface TileGenerator{
    ~TextTile generateTile()
}

class DiaryTileGenerator implements TileGenerator{
    ~TextTile generateTile()
}

class StatTileGenerator implements TileGenerator{
    ~TextTile generateTile()
}

class FriendTileGenerator implements TileGenerator{
    ~TextTile generateTile()
}

class SpeechTileGenerator implements TileGenerator{
    ~TextTile generateTile()
}

class TodoListItem{
    #String name
    #Time deadline
    #Time started
    #boolean finished
}

class TodoListManager{
    ~void displayItems()
    ~
}

class FriendsManager <<Singleton>>{}
class FriendsList{}
class Friend{}

abstract class Cloud{
    ~void attach(Listener listener)
    ~void detach(Listener listener)
    ~void notify()
}

class CloudDB <<Singleton>>{
    -Firestore db
    -Snapshot snapshot
    ~Snapshot getSnapshot()
}

class LocalDB <<Singleton>>{
    -MongoDB db
    ~void loadData()
}

class Auth <<Singleton>>{
    -FirebaseAuth auth
    -String userID
    ~String login()
    ~String logout()
}

'Class relationships'
' ok - Auth mediates for Login and Logout'
' ok - GUIManager, GUIBuilder, and all other GUI factories make up chain of command'
' ok - clouddb and conversationmanager observer'
' ok - character flyweight'
' - text tiles - factory method'
' - clouddb and localdb momento'
' ok - character decorator'

DesktopizenRunner *-- AccountManager
DesktopizenRunner *-- MainContentOperator
DesktopizenRunner *-- UserInputController
DesktopizenRunner *-- Settings
DesktopizenRunner - GUIManager : uses >

UserInputController - GUIManager : uses >
UserInputController - MiniGameManager : uses >

MiniGameManager - Settings : uses >
MiniGameManager *-- MiniGame
MiniGameManager *-- FeedGame
MiniGameManager *-- DesktopFileGame
MiniGameManager *-- TypeGame

GUIManager - GUIBuilder : creates >
GUIBuilder o-- GUIBuilder

DiaryTileGenerator - DiaryTiles : creates >
StatTileGenerator - StatTile : creates >
FriendTileGenerator - FriendTile : creates >
SpeechTileGenerator - SpeechTile : creates >

Cloud <|-- CloudDB
Cloud <|-- LocalDB
Cloud <|-- Auth

ConversationListener - Cloud : observes >
ConversationListener <|-- FriendConversation
ConversationListener <|-- CharacterConversation
CharacterConversation - LLMManager : uses >

FriendsManager - CloudDB : observes >
FriendsManager <|-- FriendsList
FriendsList *-- FriendTileGenerator
FriendsList o-- Friend

Auth - Login : helps mediate >
Auth - Logout : helps mediate >

AccountManager - Account : creates >

AccountManager *-- Login
AccountManager *-- Logout

MainContentOperator *-- EnvironmentManager
MainContentOperator *-- CharacterManager
EnvironmentManager *-- EnvironmentCustomizations
CharacterManager *--CharacterCustomizer : uses >
CharacterManager o-- Character : creates >
Character *-- Animation
Character *-- Model
Character *-- FileGenerator
Character *-- FileSender
Character *-- TodoListManager
Character *-- DiaryManager
Character *-- Inventory
Character *-- Statistics

Statistics o-- StatTiles
Inventory o-- Item
Inventory - ItemGenerator : uses >
FileSender - File : creates >
ItemGenerator - Item : creates >

@enduml